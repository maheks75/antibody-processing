#step2
import pandas as pd

data = pd.read_csv('F_igblast_IL_8_output_file.csv')

col_cdr = data['cdr3_aa']
col_seqs = data['sequence_aa']

with open('Full_seq.txt', 'w') as file:
    for j, (co, se) in enumerate(zip(col_cdr, col_seqs)):
        if '*' not in str(se) and str(co) != 'nan':
            header = f'seq{j + 1}'
            file.write(f'{co}\n')

#FINAL script for family selection for the whole set of cdrs while excluding the ones present in the families.
#step3(score 20 worked for phage samples)
import os
import ast

def process_element(first_element, current_element, matrix_dict):
    current_dict = {}
    for fe, ce in zip(first_element, current_element): 
        current_dict.setdefault((fe, ce), 0)
        current_dict[fe, ce] += 1
    multiplied_dict = {}
    for key, value in current_dict.items():
        matrix_value = matrix_dict.get(key, 0)
        multiplied_dict[key] = value * matrix_value        
    dict_values = multiplied_dict.values()   
    dict_sum = sum(dict_values)
    #dict_sum = round(sum(dict_values)/len(first_element),2)
    #print(f"Multiplied Dict for {dict_sum}")
    return dict_sum > 5600.0

def process_file(input_filename, matrix_dict):
    with open(input_filename, 'r') as file:
        input_slist = [line.strip() for line in file]

    remain_list = input_slist.copy()
    #print(remain_list)
    # Create output directory based on the input file name
    output_dir = os.path.join("output_directory_fullseq_40cdr", os.path.splitext(os.path.basename(input_filename))[0])
    os.makedirs(output_dir, exist_ok=True)

    while remain_list:
        first_element = remain_list[0]
        family = [first_element]
        count = 1
        for current_element in remain_list[1:]:
            if process_element(first_element, current_element, matrix_dict):
                family.extend([current_element])
                count += 1
        output_filename = os.path.join(output_dir, f"{first_element}-{count}.txt")
        with open(output_filename, "w") as file:
            for fa in family:
                file.write(f"{fa}\n")
        remain_list = [ele for ele in remain_list if ele not in family]

if __name__ == "__main__":
    import biotite.sequence as seq
    import biotite.sequence.align as align
    import numpy as np
    import ast
    alph = seq.ProteinSequence.alphabet
    # Load the standard protein substitution matrix, which is BLOSUM62
    matrix = align.SubstitutionMatrix.std_protein_matrix()


    matrix_dict = align.SubstitutionMatrix.dict_from_db("BLOSUM62")
    #matrix_dict[("P","Y")] = 100
    matrix = align.SubstitutionMatrix(alph, alph, matrix_dict)

    scores = np.identity(len(alph), dtype=int)
    matrix = align.SubstitutionMatrix(alph, alph, scores)   # Define your matrix_dict here
    input_directory = "cdr"  # Change this to your input directory

    for filename in os.listdir(input_directory):
        if filename.endswith(".txt"):
            input_filepath = os.path.join(input_directory, filename)
            process_file(input_filepath, matrix_dict)
